// 객체의 형변환

// 1) 객체는 논리 평가 시 true를 반환합니다. 단 하나의 예외도 없죠. 따라서 객체는 숫자형이나 문자형으로만 형 변환이 일어난다고 생각하시면 됩니다.

// 2) 숫자형으로의 형 변환은 객체끼리 빼는 연산을 할 때나 수학 관련 함수를 적용할 때 일어납니다. 객체 Date끼리 차감하면(date1 - date2) 두 날짜의 시간 차이가 반환됩니다.

// 3) 문자형으로의 형 변환은 대개 alert(obj)같이 객체를 출력하려고 할 때 일어납니다.


  // To Primitive (원형으로의 변환)

    // (ㄱ) string 
    alert(obj); //(보통 객체로 출력할 때 사용)
    anotherObj[obj] = 123; // 객체를 프로퍼티 키로 사용하고 있음


    // (ㄴ) number
    let num = Number(obj); //명시적으로 형 변환

    let n = +obj; // 단항 덧셈 연산 (앞에 + 붙이면 숫자형으로 변경됨)
    let delta = date1 = date2;

    let greater = user1 > user2; //숫자 비교


    // (ㄷ) defalut ( 연산자가 기대하는 자료형이 확실하지 않을 때 )

    // 이항 덧셈 연산자 +는 피연산자의 자료형에 따라 문자열을 합치는 연산을 할 수도 있고 숫자를 더해주는 연산을 할 수도 있음.
    // 따라서 +의 인수가 객체일는 hint가 default가 됨
    // 동등 연산자 ==를 사용해 객체-문자형, 객체-숫자형, 객체-심볼형끼리 비교할 때도, 객체를 어떤 자료형으로 바꿔야 할지 확신이 안 서므로 hint는 default가 됩

    let total = obj1 + obj2; //이항 덧셈연산은 hint로 디폴트를 사용

    if ( user == 1 ) {'...'}; //obj == number 연산은 hint로 디폴를 사용

    // 크고 작음을 비교할 때 쓰이는 연산자 <, > 역시 피연산자에 문자형과 숫자형 둘 다를 허용하는데, 이 연산자들은 hint를 'number’로 고정

    // ‘boolean’ hint는 존재하지 않음. 모든 객체는 그냥 true로 평가됨.
    // 내장 객체에 사용되는 규칙처럼 "default"와 "number"를 동일하게 처리하면, 결국엔 두 종류의 형 변환(객체-문자형, 객체-숫자형)만 남게 됨




    // 자바스크립트는 형 변환이 필요할 때, 아래와 같은 알고리즘에 따라 원하는 메서드를 찾고 호출 함
      // (1) 객체에 obj[Symbol.toPrimitive](hint)메서드가 있는지 찾고, 있다면 메서드를 호출합니다. Symbol.toPrimitive는 시스템 심볼로, 심볼형 키로 사용됩니다.
      // (2) 1에 해당하지 않고 hint가 "string"이라면, obj.toString()이나 obj.valueOf()를 호출합니다(존재하는 메서드만 실행됨).
      // (3) 1과 2에 해당하지 않고, hint가 "number"나 "default"라면 obj.valueOf()나 obj.toString()을 호출합니다(존재하는 메서드만 실행됨).
