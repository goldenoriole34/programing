//############################################
//나머지 연산자
//############################################
//% 기호이지만 퍼센트와 관련없음
//보통 %2를 통해 홀수와 짝수를 구분하여 작업하기도 한다.
// alert(5 % 2); //1
// alert(8 % 3); //2


//############################################
//거듭제곱 연산자
//############################################
// alert(2 ** 2); //2
// alert(2 ** 3); //8

//정수가 아닌 숫자도 동작하여 제곱근으로 보통 사용함
// alert( 4 ** (1/2)); //2   //4 = (2 ** 2) 
// alert( 8 ** (1/3)); //2   //8 = (2 ** 3)


//############################################
//이항 연산자 + 문자열 연결
//############################################
// let s = "my" + "string";
// alert(s); //"mystring"

// 하나가 문자열이면 나머지도 문자열로 변환됨
// alert("1" + 2) // 12 
// alert(2 + 2 + "1") //41 
// alert(2 + "1" + 1) //111


//############################################
//단향 연산자 (+)를 통한 숫자형 변환
//############################################
//숫자에는 반응하지 않는다
// let x = 1;
// alert(+x); //1
// let y = -1;
// alert(+y) //-1

//숫자형이 아닌 피연산자를 숫자형으로 변환 ( Number() 대신 사용되기도 한다.)
// alert(+true); //1 +없이 출력하면 그냥 true 출력 됨
// alert(+"")//0 +없이 출력하면 그냥 "공백 출력됨

// let apples = "2"
// let oranges = "3"
// alert(apples + oranges); //23 단순히 문자열로 연결됨
// alert(+apples + +oranges); //5

//############################################
//할당 연산자
//############################################
// let x = 2 * 2 + 1;
// alert(x); //5

// let a = 1;
// let b = 2;

// let c = 3 - (a = b + 1);
// alert (a); //3
// alert (c); //0

//체이닝 (가독성에 좋지 않아 권장x)
// let a, b, c;
// a = b = c = 2 + 2;


//############################################
//복합할당 연산자
//############################################
// let n = 2;
// n = n + 5;
// n = n * 2;
// alert(n); //14


//############################################
//증감 연산자
//############################################
//변수에만 쓸 수 있음
//++와 --는 변수 앞 뒤 모두 사용하며
//앞으로 올때 전위형 (새로운 값을 반환)
//뒤로 올때 후위형 (기존 값을 반환)

// let counter = 2;

// counter++; //counter = counter + 1 과 같음
// alert(counter); //3

// counter--; //counter = counter - 1 과 같음
// alert(counter); //1

// let a = ++counter;
// alert(a); //3 (새로운 값을 반환)
// let b = counter++;
// alert(b); //2 (기존 값을 반환)
