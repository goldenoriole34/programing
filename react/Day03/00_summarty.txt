리액트에서 프론트 화면을 구성할 때 보통 input 박스를 활용한다.
그리고 submit을 통해 백엔드 서버로 보낸다.

실시간으로 변경값을 가져오기 위해 onChange라는 함수를 사용한다.

1.state를 활용한 event 처리
  실시간 검색 등을 구현할 수 있음
  form 컴포넌트에 input, submit 생성
  2가지 이벤트 추가
  input -> onChange : form 컴포넌트 state값을 최신화
  form -> submit : 마지막으로 최신화 된 state값을 console.log 출력
  (참고 : 페이지 이동을 막기 위해 e.preventDefalut 추가)

  변경된 값을 넣어주기 위해서는 상태를 ''가 아닌 상태를 아예 변경해야한다.
  매개변수 e에 대해 상태변경 값이 바로 출력된다.

2. 리액트 디버깅에 좋은 확장프로그램
  props 입력해 브라우저에서 확인할 수 있고
  함수또한 넘길 수 있다. 객체 스트링 모두 가능하다


3. 리액트의 단점과 끌어올리기
  자식컴포넌트가 같은 부모의 다른 컴포넌트 즉 형제컴포넌트에 상태 전달이 어렵다.
  부모 컴포넌트에 상태를 지정하고 자식컴포넌트들에서 가져와서 쓴다.
  변경상태를 공유하기 위해서는 부모컴포넌트가 자식컴포넌트에서 값을 끌어올려서 반영한 후 또 다른 자식컴포넌트로 보내야 한다.

  change => 부모컴포넌트에서 자식 컴포넌트의 상태를 바꿀 수 있는 '함수'를 props로 보냄
  부모 컴포넌트가 보낸 함수가 props 들어오면 그것을 change값으로 변경함
  자식에 의해 부모 컴포넌트가 변경된 값이 반영되면 그 값을 또 다른 컴포넌트로 보내줄 수 있음
  app 의 value={this.state.value}를 통해 자식컴포넌트에 state를 전달
  확장프로그램으로 조회하면 자식 컴포넌트는 부모로부터 props를 받으므로 props의 값이 변경되는 대신 스스로의 state는 변경되지 않는다.
  반면 부모 컴포넌트는 본인의 state의 값이 변경되는 것을 확인할 수 있다.

  형제컴포넌트 value를 만들어 조회하였을때 역시 app의 state값을 props로 받아 값이 변경된 것을 확인할 수 있다.

4. state 값을 맨 윗단위 컴포넌트에 해야하나?
  아니다 변경단위 값이 최상위 컴포넌트에 있다면 전체가 재랜더링 되므로 불필요한 부담과 속도지연이 생긴다.
  적정선에서 설계한다. (사실 이후 리덕스 사용하면 신경쓰지 않아도 되는 문제이다)

5. 리스트와 key
  react component를 활용하여 간편하게 리스트를 만들 수 있다. 
  SELECT query시 데이터타입은 Array다
  콘솔에 warnning은 배열에 키값을 주면 해결된다.

6. 틱택토 게임 만들기
